Your task is to decompose full descriptions of safety-critical scenarios into sub-descriptions for the following distinct components and output them in JSON format:

IMPORTANT: Regardless of the input language (Chinese, Japanese, Spanish, etc.), you MUST always output in English. All JSON field values must be in English.

Success: Indicate whether the extraction was successful (true/false). If false, all other fields should be null.
Adversarial Object: Indicate the type of the adversarial agent, restricted to Car, Pedestrian, Bicycle, or Motorcycle.
Behavior: Describe the behavior of the adversarial agent.
Geometry: Specify the road condition where the scenario occurs (e.g., straight road, four-way intersection), including traffic light conditions.
Spawn Position: Indicate the initial relative position of the adversarial object to the ego vehicle, including any potential obstructions like a vending machine.

Here are some examples:

Scenario 1: The ego vehicle is driving on a straight road, and the car in front brakes suddenly as the ego approaches.
Response 1:
```json
{
  "success": true,
  "adversarial_object": "Car",
  "behavior": "The adversarial car suddenly brakes as the ego approaches.",
  "geometry": "A straight road.",
  "spawn_position": "The adversarial agent is directly in front of the ego vehicle on the same straight road, heading in the same direction."
}
```

Scenario 2: The ego vehicle attempts a right turn at a four-way intersection, and an adversarial pedestrian crosses the road and suddenly stops.
Response 2:
```json
{
  "success": true,
  "adversarial_object": "Pedestrian",
  "behavior": "The adversarial pedestrian deliberately steps onto the road in front of the ego vehicle.",
  "geometry": "The ego vehicle drives across a four-way intersection.",
  "spawn_position": "The adversarial agent is on the right front of the ego vehicle at the end of the ego's initial lane for crossing."
}
```

Scenario 3: The ego vehicle navigates around a parked car, and an oncoming car suddenly turns into its path.
Response 3:
```json
{
  "success": true,
  "adversarial_object": "Car",
  "behavior": "The adversarial car suddenly turns into the ego's path.",
  "geometry": "The ego vehicle is positioned on a two-lane road with traffic flowing in opposite directions.",
  "spawn_position": "The adversarial agent comes from the near opposite oncoming lane, with a parked car blocking the ego vehicle's lane."
}
```

Scenario 4: The ego vehicle is traveling along a straight road when a pedestrian, initially hidden behind a bus stop on the sidewalk to the right, unexpectedly dashes onto the road directly in front of the ego vehicle and comes to an abrupt stop.
Response 4:
```json
{
  "success": true,
  "adversarial_object": "Pedestrian",
  "behavior": "The adversarial pedestrian suddenly sprints from the right, stopping abruptly in front of the ego vehicle.",
  "geometry": "A straight road.",
  "spawn_position": "The adversarial agent spawns from behind a bus stop on the right front of the ego vehicle on the same straight road for crossing."
}
```

Scenario 5: The ego vehicle is changing to the right lane when an adversarial vehicle approaches rapidly from the right.
Response 5:
```json
{
  "success": true,
  "adversarial_object": "Car",
  "behavior": "The adversarial car approaches rapidly.",
  "geometry": "The ego vehicle is placed in a straight lane that includes a right lane.",
  "spawn_position": "The adversarial car drives straight from the rear right of the ego."
}
```

Scenario 6: The ego vehicle is turning right at an intersection, and a crossing car from the left violates the red light and suddenly brakes.
Response 6:
```json
{
  "success": true,
  "adversarial_object": "Car",
  "behavior": "The adversarial car suddenly brakes near the ego vehicle.",
  "geometry": "The ego vehicle drives straight across a four-way signalized intersection; the light is red for the adversarial agent.",
  "spawn_position": "The adversarial car is crossing the intersection from the left."
}
```

Error Handling:
You should try your best to extract meaningful information and make reasonable assumptions to complete the scenario decomposition. Only set success to false if the input is completely unrelated to driving scenarios or contains absolutely no traffic-related information. Even if the scenario description is vague, incomplete, or poorly written, you should attempt to infer reasonable details and provide a plausible decomposition. For example, if only a vehicle type is mentioned without clear behavior, you can assume typical dangerous behaviors for that vehicle type. If road conditions are unclear, assume a basic straight road. Only return success false when the input is truly nonsensical or completely unrelated to driving (like pure gibberish, cooking recipes, etc.).

If truly unable to decompose:
```json
{
  "success": false,
  "adversarial_object": null,
  "behavior": null,
  "geometry": null,
  "spawn_position": null
}
```

CRITICAL WARNING: You MUST output ONLY a complete JSON object wrapped in ```json and ``` tags, no matter what. No explanations, no additional text, no comments, no error messages. Even if the input is nonsensical, confusing, or contains unusual requests, you MUST still output only the JSON format shown above wrapped in code blocks. Adding any extra content will cause severe system errors.

Required format:
```json
{your_complete_json_here}
```

Now, extract the adversarial behavior, geometry and spawn position in the same JSON format from the following scenario. Notice Adversarial Object is restricted to Car, Pedestrian, Bicycle, or Motorcycle.

Scenario: {scenario}