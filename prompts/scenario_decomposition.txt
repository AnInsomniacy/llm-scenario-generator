Your task is to decompose full descriptions of safety-critical scenarios into sub-descriptions for the following distinct components and output them in JSON format:

Adversarial Object: Indicate the type of the adversarial agent, restricted to Car, Pedestrian, Bicycle, or Motorcycle.
Behavior: Describe the behavior of the adversarial agent.
Geometry: Specify the road condition where the scenario occurs (e.g., straight road, four-way intersection), including traffic light conditions.
Spawn Position: Indicate the initial relative position of the adversarial object to the ego vehicle, including any potential obstructions like a vending machine.

Here are some examples:

**Example 1:**
Scenario: The ego vehicle is driving on a straight road, and the car in front brakes suddenly as the ego approaches.
```json
{
  "adversarial_object": "Car",
  "behavior": "The adversarial car suddenly brakes as the ego approaches.",
  "geometry": "A straight road.",
  "spawn_position": "The adversarial agent is directly in front of the ego vehicle on the same straight road, heading in the same direction."
}
```

**Example 2:**
Scenario: The ego vehicle attempts a right turn at a four-way intersection, and an adversarial pedestrian crosses the road and suddenly stops.
```json
{
  "adversarial_object": "Pedestrian",
  "behavior": "The adversarial pedestrian deliberately steps onto the road in front of the ego vehicle.",
  "geometry": "The ego vehicle drives across a four-way intersection.",
  "spawn_position": "The adversarial agent is on the right front of the ego vehicle at the end of the ego's initial lane for crossing."
}
```

**Example 3:**
Scenario: The ego vehicle navigates around a parked car, and an oncoming car suddenly turns into its path.
```json
{
  "adversarial_object": "Car",
  "behavior": "The adversarial car suddenly turns into the ego's path.",
  "geometry": "The ego vehicle is positioned on a two-lane road with traffic flowing in opposite directions.",
  "spawn_position": "The adversarial agent comes from the near opposite oncoming lane, with a parked car blocking the ego vehicle's lane."
}
```

**Example 4:**
Scenario: The ego vehicle is traveling along a straight road when a pedestrian, initially hidden behind a bus stop on the sidewalk to the right, unexpectedly dashes onto the road directly in front of the ego vehicle and comes to an abrupt stop.
```json
{
  "adversarial_object": "Pedestrian",
  "behavior": "The adversarial pedestrian suddenly sprints from the right, stopping abruptly in front of the ego vehicle.",
  "geometry": "A straight road.",
  "spawn_position": "The adversarial agent spawns from behind a bus stop on the right front of the ego vehicle on the same straight road for crossing."
}
```

**Example 5:**
Scenario: The ego vehicle is changing to the right lane when an adversarial vehicle approaches rapidly from the right.
```json
{
  "adversarial_object": "Car",
  "behavior": "The adversarial car approaches rapidly.",
  "geometry": "The ego vehicle is placed in a straight lane that includes a right lane.",
  "spawn_position": "The adversarial car drives straight from the rear right of the ego."
}
```

**Example 6:**
Scenario: The ego vehicle is turning right at an intersection, and a crossing car from the left violates the red light and suddenly brakes.
```json
{
  "adversarial_object": "Car",
  "behavior": "The adversarial car suddenly brakes near the ego vehicle.",
  "geometry": "The ego vehicle drives straight across a four-way signalized intersection; the light is red for the adversarial agent.",
  "spawn_position": "The adversarial car is crossing the intersection from the left."
}
```

Now, extract the adversarial behavior, geometry and spawn position in the same JSON format from the following scenario. Notice Adversarial Object is restricted to Car, Pedestrian, Bicycle, or Motorcycle.

Scenario: {scenario}

Please output only the JSON response without any additional text.